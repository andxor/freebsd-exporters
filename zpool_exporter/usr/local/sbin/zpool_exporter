#!/bin/sh
base="lapo_zpool"
stats() {
  zpool list -Hp | awk -v q='"' -v base="$base" '
    BEGIN {
      print "# HELP " base "_size Size of zpool in bytes."
      print "# TYPE " base "_size gauge"
      print "# HELP " base "_alloc Allocated size of zpool in bytes."
      print "# TYPE " base "_alloc gauge"
      print "# HELP " base "_frag Percentage (0-100) of fragmentation of zpool."
      print "# TYPE " base "_frag gauge"
      print "# HELP " base "_dedup Deduplication factor (1.0 mean no deduplication)."
      print "# TYPE " base "_dedup gauge"
      print "# HELP " base "_healthy zpool health status (1=ONLINE, 0=DEGRADED or worse)."
      print "# TYPE " base "_healthy gauge"
    }
    {
      param = "{pool=" q $1 q "} "
      print base "_size" param $2
      print base "_alloc" param $3
      sub("%", "", $7) # some version print a trailing "%"
      print base "_frag" param $7
      sub("x", "", $9) # some version print a trailing "x"
      print base "_dedup" param $9
      print base "_healthy" param (($10 == "ONLINE") ? 1 : 0)
    }
  '
  zpool status | awk -v q='"' -v base="$base" '
    BEGIN {
      scan_nr = -9
      print "# HELP " base "_scrub_time Unixtime of latest zpool scrub."
      print "# TYPE " base "_scrub_time gauge"
      print "# HELP " base "_scrub_progress Percentage (0-100) of latest zpool scrub (100 when complete)."
      print "# TYPE " base "_scrub_progress gauge"
      print "# HELP " base "_error_total Number of errors since latest `zpool clear`."
      print "# TYPE " base "_error_total counter"
    }
    /^ *pool:/ {
      pool = "pool=" q $2 q
      param = "{" pool "} "
    }
    /^ *scan:/ {
      if (match($0, /(Mon|Tue|Wed|Thu|Fri|Sat|Sun) [A-Z][a-z][a-z] +[0-9]+ [0-9:]+ 2[0-9]+$/) > 0) {
        d1 = substr($0, RSTART, RLENGTH)
        "date -j -f " q "%a %b %d %T %Y" q " " q d1 q " +%s" | getline d2
        print base "_scrub_time" param d2
      }
      if (match($0, /scan: scrub in progress/) > 0)
        scan_nr = NR;
      else
        print base "_scrub_progress" param "100"
    }
    NR == scan_nr + 2 {
      if (match($0, /[0-9.]+% done/) > 0)
        print base "_scrub_progress" param substr($0, RSTART, RLENGTH-6)
    }
    function is_number(x) { return x+0 == x }
    function error(dev, val, type) {
      if (is_number(val) && val > 0)
        print base "_error_total{" pool ",dev=" q dev q ",type=" q type q "} " val
    }
    /^config:$/ { config = 2 }
    /^$/ { --config }
    config > 0 {
      error($1, $3, "read")
      error($1, $4, "write")
      error($1, $5, "cksum")
    }
  '
}
if [ -z "$1" ]; then
  stats
else
  stats > "$1.tmp"
  mv "$1.tmp" "$1"
fi
